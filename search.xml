<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[安装Archlinux(UEFI引导+GPT分区)]]></title>
    <url>%2F2020%2F03%2F06%2FInstallArch%2F</url>
    <content type="text"><![CDATA[安装Archlinux官方Installation_guide 下载 到 Arch官网下载iso文件 制作U盘启动盘 在windows或者linux上腾出一块空闲的空间 进入bios选择U盘启动 ls /sys/firmware/efi/efivars 查看引导方式， 如果该文件夹不存在则是BIOS引导，否则是UEFI引导 dhcpcd 或者 wifi-menu联网（ping archlinux.org 确认是否连接成功） timedatectl set-ntp true 更新系统时间创建分区并格式化磁盘查看安装的磁盘信息fdisk -l创建分区表输入 fdisk /dev/sdX (酌情填入相应X) 操作相应磁盘 按 g 创建gtp分区表（o创建mbr分区表） 按 n 创建新分区（若有引导分区不用创建引导分区） 创建引导分区：起始扇区默认 结束扇区可填入 +512M创建一个 512M 的引导分区,按t更改分区类型，按ef更改为EFI类型 创建根分区 结束扇区可填入 +XM/G 来创建一个XM/G 的分区 按p查看创建的分区是否有误 按w将之前的操作写入磁盘（使之生效）格式化磁盘 mkfs.fat -F32 /dev/sdXy 将引导分区格式化为fat格式 mkfs.ext4 /dev/sdXy 将根分区格式化为ext4格式挂载分区mount /dev/sdXy /mnt 将根分区挂载到 /mnt mkdir /mnt/bootmount /dev/sdXy /mnt/boot 将引导分区挂载到 /mnt/boot 安装Arch到磁盘上下载及基本配置 vim /etc/pacman.d/mirrorlist 选择镜像源 (将China的源剪切到最上面，最后:wq保存) pacstrap /mnt base base-devel linux linux-firmware dhcpcd 安装 essential packages genfstab -L /mnt &gt;&gt; /mnt/etc/fstab 创建fstab文件 cat /mnt/etc/fstab 检查fstab是否有问题 arch-chroot /mnt 进入新系统，之后都是对新安装在磁盘上的系统的操作 设置时区 12ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimehwclock --systohc pacman -S vim networkmanager wpa_supplicant dialog 安装一些工具 vim /etc/locale.gen 取消en_US.UTF-8 UTF-8`zh_CN-UTF-8 UTF -8zh_TW.UTF-8 UTF-8zh_HK.UTF-8 UTF-8`的注释 locale-gen vim /etc/locale.conf 写入LANG=en_US.UTF-8 vim /etc/hostname 填入 myhostname(自己取个主机名) vim /etc/hosts 如下填写：127.0.0.1 localhost::1 localhost127.0.1.1 myhostname.lolocaldomain myhostname psswd 设置root密码设置Boot loader pacman -S intel-ucode（intel处理器）或者pacman -S amd-ucode（AMD处理器) pacman -S os-prober ntfs-3g 这两个包可以配合grub检测已经存在的系统 pacman -S grub efibootmgr grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub grub-mkconfig -o /boot/grub/grub.cfg 自动生成GRUB配置文件 vim /boot/grub/grub.cfg 检查其中menuentry部分是否有问题 退出chroot并重启 1234exitumount /mnt/bootumount /mntreboot tips:Optionally manually unmount all the partitions with umount -R /mnt: this allows noticing any “busy” partitions 建议配置 重启后dhcpcd 或者wifi-menu重新联网 新建用户： useradd -m -G wheel username 自己起个用户名 passwd username 设置密码 123pacman -S sudovisudo去掉# %wheel ALL=(ALL)ALL 前面的注释#号并保存退出 12345678创建交换文件fallocate -l 512M /swapfile (可将512M替换为所需大小)chmod 600 /swapfilemkswap /swapfileswapon /swapfilevim /etc/fstab 在最后一行加入： /swapfile none swap defaults 0 0注意不要修改该文件前面的内容 关于swapfile的详情 reboot （重启）1234567891011121314关于14-18步的详细资料:First, install the packages grub and efibootmgr: GRUB is the bootloader while efibootmgr is used by the GRUB installation script to write boot entries to NVRAM.Then follow the below steps to install GRUB: 1. Mount the EFI system partition and in the remainder of this section, substitute esp with its mount point. 2. Choose a bootloader identifier, here named GRUB. A directory of that name will be created in esp/EFI/ to store the EFI binary and this is the name that will appear in the UEFI boot menu to identify the GRUB boot entry. 3.Execute the following command to install the GRUB EFI application grubx64.efi to esp/EFI/GRUB/ and install its modules to /boot/grub/x86_64-efi/.# grub-install --target=x86_64-efi --efi-directory=esp --bootloader-id=GRUBGRUBgrub-mkconfig will automatically detect the microcode update and configure GRUB appropriately. After installing the microcode package, regenerate the GRUB config to activate loading the microcode update by running:# grub-mkconfig -o /boot/grub/grub.cfg 图形界面 安装显卡驱动(Driver) 查看详细驱动版本 如果是intel集成显卡: sudo pacman -S xf86-video-intel sudo pacman -S xorg sudo pacman -S plasma kde-applications 使用sddm 12sudo pacman -S sddmsudo systemctl enable sddm 设置开机自启动 sddm 使用NetworkManager 123sudo systemctl disable netctl 取消自启动 netctlsudo systemctl enable NetworkManagersudo pacman -S network-manager-applet 字体和输入法 12sudo pacman -S ttf-dejavusudo pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji 1sudo pacman -S fcitx fxitx-im 再选择一个输入法装上 备份与恢复系统可用rsync完整备份系统 备份： (必须用linux文件系统的存储，NFTS格式会出问题)sudo rsync -aAXv --delete --exclude={&quot;/dev/*&quot;,&quot;/proc/*&quot;,&quot;/sys/*&quot;,&quot;/tmp/*&quot;,&quot;/run/*&quot;,&quot;/mnt/*&quot;,&quot;/media/*&quot;,&quot;/lost+found&quot;,&quot;swapfile&quot;} / /挂载的外部存储/ 恢复： 在镜像里挂载存储备份的盘和将要装入系统的磁盘挂载上去 mount /dev/sdXy /backup 装备份的盘 mount /dev/sdZw /mnt 将要装系统的盘 mount /dev/sdPq /mnt/boot 新系统的引导盘 rsync -aAXv --delete --exclude={&quot;lost+found&quot;} /backup/* /mnt (注意/backup/ 后面的不能漏掉,否则会创建一个backup文件夹在根目录导致系统启动不了) mkinitcpio -p linux (之前没加这条导致重启后磁盘不能挂载，详细作用还没有弄清楚) genfstab -L /mnt &gt;&gt; /mnt/etc/fstab (修改fstab文件) cat /mnt/etc/fstab (检查fstab是否有问题) arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub grub-mkconfig -o /boot/grub/grub.cfg (自动生成GRUB配置文件) vim /boot/grub/grub.cfg (检查其中menuentry部分是否有问题) exit (退出arch-chroot) umount /backup umount /mnt/boot umount /mnt/ reboot 好用的安装包 yay 123git clone https://aur.archlinux.org/yay.gitcd yaymakepkg -si rsync 传输文件的工具 screen screen -S session screen -ls screen -r session reattach 在session内: ctrl+a, d Detach ctrl+a, S(大写) 上下分屏 ctrl+a, | 左右分屏 ctrl+a, tab 切换分屏 ctrl+a, c 在新创建的启动bash ctrl+a, X(大写) 删除当前分屏 stardict 需要去网上下载相关词库文件 fish vim ~/.bashrc 在最后加入exec fish 在启动bash的时候自动启动fish 如需要切换回bush，输入 bash –norc （不执行~/.bashrc文件) vlc 视频播放器 libreoffice 办公 相关命令fdisk -llsblkdf -hdu -shcat /proc/cpuinfo]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10、Arch双系统，Arch经常莫名没声音]]></title>
    <url>%2F2020%2F01%2F09%2FLinuxAudio%2F</url>
    <content type="text"><![CDATA[Win10、Archlinux双系统下，Arch经常莫名奇妙没有声音，根据Arch Wiki无论怎么配置，怎么reboot都没有作用，而过一段时间又莫名有声音了 偶然发现以下现象： 在Windows下通过重新启动进入linux就会导致linux没有声音 而将windows彻底关机之后再开机进入linux就不会出现问题 当linux没有声音时reboot没用，但shutdown之后再开机就解决了]]></content>
      <categories>
        <category>linux系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Archlinux下安装使用Mariadb]]></title>
    <url>%2F2019%2F11%2F16%2FMariadb%2F</url>
    <content type="text"><![CDATA[安装MariadbMariaDB(Arch官方wiki)流程总结： sudo pacman -S mariadb mariadb-libs 安装之后必须先执行 sudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql sudo systemctl start mariadb.service sudo systemctl enable mariadb.service 根据提示从下面这个命令启动数据库级别的安全配置助手，来配置一些必要的安全选项：sudo mysql_secure_installation sudo ysql_upgrade -u root -p 配置首先以root账号登录你的MySQL服务器：mysql -p -u root (tips: 若忘记root账号的密码，可以用sudo mysql -p -u root，用本机用户获取root权限的密码来代替) 添加新用户以下是创建一个密码为’newUserPassword’的’newUser’用户的示例,并赋予 testDataBase(database)完全操作权限：(tips：只有在root用户赋予newUser用户相应的database的权限之后，ewUser才能对该database操作， 赋予权限时database可以是还没有创建的，之后可以用newUser创建，若newUser没有被赋予权限则只能由root用户创建)12345MariaDB&gt; CREATE USER &apos;newUser&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;newUsersPassword&apos;;MariaDB&gt; GRANT ALL PRIVILEGES ON testDataBase.* TO &apos;newUserName&apos;@&apos;localhost&apos;;MariaDB&gt; FLUSH PRIVILEGES;MariaDB&gt; quit 为数据库使用 UTF-8 编码在 /etc/my.cnf 的 mysqld 下, 添加:12345[mysqld]init_connect = &apos;SET collation_connection = utf8_general_ci,NAMES utf8&apos;collation_server = utf8_general_cicharacter_set_client = utf8character_set_server = utf8 简单使用1234567891011121314151617181920212223242526272829303132root用户：CREATE USER &apos;newUser&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;newUsersPassword&apos;; //创建用户GRANT ALL PRIVILEGES ON databaseName.* TO &apos;newUserName&apos;@&apos;localhost&apos;; //赋予用户对databaseName的所有操作权限revoke all privileges on databaseName.* from userName@&apos;localhost&apos;; //收回权限drop user userName@&apos;%&apos;; //删除用户所有用户：show grants; //查看被赋予的权限show databases; //查看当前用户所拥有权限所有的数据库show tables; //查看数据表create database datebaseName //创建数据库DROP DATABASE Database_name; //删除数据库//创建数据表:首先切换数据库：use databaseName ；然后创建表：create table tableName(列名1,列名2);（tips：列名1和列名2之间用逗号&quot;,&quot;隔开）示例：MariaDB[test] &gt; create table person(name varchar(10) not null,birth date); // 如果有多列，必须要指定 varchar(size)中的值或者MariaDB[test] &gt; create table person-&gt; (-&gt; name char(10) not null,-&gt; birth date-&gt;); （注意命令不要打错，打漏字母）]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vscode编译调试c语言]]></title>
    <url>%2F2019%2F11%2F07%2FvscodeDebug%2F</url>
    <content type="text"><![CDATA[安装插件”C/C++” “Code Runner” 创建一个文件夹作为工作路径 用vscode打开该文件夹（必须是文件夹，只打开单个文件不能调试） 在File-&gt;Preferences-&gt;settings-&gt;User-&gt;Extensions-&gt;Run Code configuration里勾上”Run In Terminal” 新建一个helloWorld.c文件，随意设一个断点 在debug里按调试会新建一个launch.json文件（在.vscode隐藏文件夹里） 接着会提示创建一个task.json文件，此时已经能够进行运行及调试了（有其他需求可以看着改这两个文件）]]></content>
  </entry>
  <entry>
    <title><![CDATA[Archlinux下多SSH的管理]]></title>
    <url>%2F2019%2F11%2F05%2Fmuti-SSH%2F</url>
    <content type="text"><![CDATA[示例：github huaweicloud 配置两个不同的SSH KEY 进入~/.ssh 生成两个ssh key: 12ssh-keygen -t rsa -C &quot;&lt;email&gt;&quot; -f &quot;github_id_rsa&quot;ssh-keygen -t rsa -C &quot;&lt;email&gt;&quot; -f &quot;huaweicloud_id_rsa&quot; 分别把生成各自的 *rsa.pub中的内容添加到github与huaweicloud中的ssh中 创建config文件 vim ~/.ssh/config添加以下内容 1234567891011#githubHost github #关键词 HostName github.com #主机地址 #PreferredAuthentications publickey #User git #用户名 #Port 22 #端口 IdentityFile ~/.ssh/github_id_rsa #认证文件#huaweicloudHost codehub HostName codehub.devcloud.huaweicloud.com IdentityFile ~/.ssh/huaweicloud_id_rsa 测试 12ssh -T git@github.comssh -T git@codehub.devcloud.huaweicloud.com]]></content>
      <categories>
        <category>linux系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Arch系统语言设置]]></title>
    <url>%2F2019%2F10%2F19%2FlinuxLANG%2F</url>
    <content type="text"><![CDATA[根据这篇文章进行Archlinux系统中文配置:Archlinux官方中文化指导) 个人最终设置:12345/etc/locale.gen:en_US.UTF-8 UTF-8 zh_CN.UTF-8 UTF-8zh_HK.UTF-8 UTF-8zh_TW.UTF-8 UTF-8 12/etc/locale.conf:LANG=en_US.UTF-8 用locale命令查看结果：12345678910111213141516@Love&gt; localeLANG=en_US.UTF-8LC_CTYPE=&quot;en_US.UTF-8&quot;LC_NUMERIC=&quot;en_US.UTF-8&quot;LC_TIME=&quot;en_US.UTF-8&quot;LC_COLLATE=&quot;en_US.UTF-8&quot;LC_MONETARY=&quot;en_US.UTF-8&quot;LC_MESSAGES=&quot;en_US.UTF-8&quot;LC_PAPER=&quot;en_US.UTF-8&quot;LC_NAME=&quot;en_US.UTF-8&quot;LC_ADDRESS=&quot;en_US.UTF-8&quot;LC_TELEPHONE=&quot;en_US.UTF-8&quot;LC_MEASUREMENT=&quot;en_US.UTF-8&quot;LC_IDENTIFICATION=&quot;en_US.UTF-8&quot;LC_ALL= 12345678@Love&gt; locale -aCen_US.utf8POSIXzh_CN.utf8zh_HK.utf8zh_TW.utf8 12345@Love&gt; localectlSystem Locale: LANG=en_US.UTF-8 VC Keymap: n/a X11 Layout: n/a 查看安装的字体:123456@Love ~/S/blog&gt; /usr/share/fonts/@Love /u/s/fonts&gt; ls100dpi/ cyrillic/ misc/ wenquanyi/75dpi/ droid/ noto/adobe-source-code-pro/ encodings/ TTF/cantarell/ kanjistrokeorders/ util/ 遇到一个问题：配置好能显示中文后，系统默认设置是英文，而且能正常输入显示中文，大多数时间都正常。但是konsole会返回中文如运行 sudo pacman 、 yay 等命令时,终端输出的都是中文而且只有在图形界面plasma上会返回中文，在其他tty下都正常是全英文 解决过程 检查上述locale.gen等配置文件都没有发现问题 检查/etc/bash.bashrc,～/.bash_profile ,~/.bashrc等等bash的配置文件也没有关于文字方面的其他配置 想找konsole的配置文件但是没有找到 查arch wiki Locale(英文版，中文翻译的版本没有翻译出问题的这一部分) 词条中有以下内容： My system is still using wrong language It is possible that the environment variables are redefined in other files than locale.conf, for example ~/.pam_environment. If you are using a desktop environment, such as GNOME, its language settings may be overriding the settings in locale.conf. 划重点(之前安装的是KDE Plasma) KDE Plasma also allows to change the UI’s language through the system settings. If the desktop environment is still using the default language after the modification, deleting the file at ~/.config/plasma-localerc (previously: ~/.config/plasma-locale-settings.sh) should resolve the issue. 于是查看这两个文件如下： 1234@Love&gt; vim ~/.config/plasma-locale-settings.shexport LANG=en_US.UTF-8export LANGUAGE=en_US:zh_CN 123456@Love&gt; vim ~/.config/plasma-localerc[Formats]LANG=en_US.UTF-8[Translations]LANGUAGE=en_US:zh_CN 找到问题了！是当初装系统在这里的设置出了问题,修改这两个文件就解决了问题]]></content>
      <categories>
        <category>linux系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[arch包管理]]></title>
    <url>%2F2019%2F10%2F19%2FyayDeb%2F</url>
    <content type="text"><![CDATA[官方库中的包pacman下载并安装sudo pacman -S packageName安装已下载的文件包sudo pacman -U packageName查询sudo pacman -Qs packageName删除sudo pacman -Rs packageName AUR中的包使用 yay 工具yay -S packageNameTips：如果yay下载不了包可以尝试手动下载deb文件到 ~/.cache/yay/packageName/ 文件夹中再重新执行 yay -S packageName命令 清理软件包缓存pacman 将下载的软件包保存在 /var/cache/pacman/pkg/ 并且不会自动移除旧的和未安装版本的软件包，因此需要手动清理 使用内建选项即可清除未安装软件包的缓存：# pacman -Sc这样仅会保留软件包的当前有效版本 使用专门的脚本去处理清理哪些、清理多少缓存： pacman-contrib 提供的 paccache 命令默认会删除近3个版本前的软件包# paccache -r 也可以自己设置保留最近几个版本：# paccache -rk 1 清理所有未安装包的缓存文件，再此运行paccache:# paccache -ruk0 更多功能参见 paccache -h yay 安装的AUR库中的软件在/opt文件夹里 删除软件之后KRunner还保留着删除前的记录，但是打不开该软件，删除~/.local/share/applications中的对应文件即可]]></content>
      <categories>
        <category>linux系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Live2D]]></title>
    <url>%2F2019%2F03%2F28%2FLive2D%2F</url>
    <content type="text"><![CDATA[为Blog添加live2d看板娘下载文件到github branchLive2D下载Live2D-master文件复制demo.html中的需要的代码,在blog/themes/next/layout/_layout.swig 查找footer-inner将刚刚的复制的代码粘贴在&lt;footer id=&quot;footer&quot; class=&quot;footer&quot;&gt;的后一行，&lt;div class=&quot;footer-inner&quot;&gt;的前一行，如下1234567891011121314151617181920&lt;footer id=&quot;footer&quot; class=&quot;footer&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/live2d/css/live2d.css&quot; /&gt; &lt;div id=&quot;landlord&quot;&gt; &lt;div class=&quot;message&quot; style=&quot;opacity:0&quot;&gt;&lt;/div&gt; &lt;canvas id=&quot;live2d&quot; width=&quot;200&quot; height=&quot;300&quot; class=&quot;live2d&quot;&gt;&lt;/canvas&gt; &lt;div class=&quot;hide-button&quot;&gt;隐藏&lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/live2d/js/download.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var message_Path = &apos;/live2d/&apos; var home_Path = &apos;https://&lt;&lt;username&gt;&gt;@github.io/&apos; //修改 &lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/live2d/js/live2d.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/live2d/js/message.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; loadlive2d(&quot;live2d&quot;, &quot;/live2d/model/xiaoMai/13.json&quot;); &lt;/script&gt;&lt;div class=&quot;footer-inner&quot;&gt; 相关配置 复制Live2D-master文件里的live2d文件夹到blog/themes/next/source/路径中 Tips:使用hexo框架时，如果在文章中需要引用 css,js,json等文件，不能放在_post文件夹下，否则这些文件也会被发布，在blog中莫名出现Untitled文件。可以将这些文件放在blog/themes/next/source/中,此时hexo generate会将该所用的主题(Next)的source/中的文件生成到public/中 修改刚刚复制的代码 123&lt;canvas id=&quot;live2d&quot; width=&quot;200&quot; height=&quot;300&quot; class=&quot;live2d&quot;&gt;&lt;/canvas&gt; //修改大小var home_Path = &apos;https://&lt;&lt;username&gt;&gt;@github.io/&apos; //这里是博客主页Urlloadlive2d(&quot;live2d&quot;, &quot;/live2d/model/xiaoMai/13.json&quot;); //这里是要用的model 修改/live2d/css/live2d.css 1234567891011121314151617181920#landlord &#123; user-select: none; position: fixed; left: 30px; //与页面左边框的距离 bottom: 0; //与页面右边框的距离 width: 200px; //width与height应与_layout.swig height: 300px; //中的&lt;canvas width=&quot;200&quot; height=&quot;300&quot;&gt;相同 z-index: 10000; font-size: 0; transition: all .3s ease-in-out;.message &#123; opacity: 0; width: 220px; //修改message宽度 height: auto; margin: auto; padding: 7px; top: -50px; //与小埋图片的距离 left: -10px;&#125; 修改/live2d/model/xiaoMai/13.json 123456&quot;layout&quot;:&#123; &quot;width&quot;:1.8, //修改图片大小(宽度)，高度自动适应 &quot;center_x&quot;:-0.0507, //图片在 canvas中 &quot;center_y&quot;:0.45 //的相对位置&#125;, 修改blog/themes/next/source/live2d/message.json 修改点击后出现的messageTips:在修改live2d大小、位置时，可以在chrome中右键，Inspect,直接修改合适后再更改配置文件]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客配置]]></title>
    <url>%2F2019%2F03%2F21%2FBlogSetting%2F</url>
    <content type="text"><![CDATA[使用NexT主题 进入themes目录git clone https://github.com/theme-next/hexo-theme-next.git next/ 设置主题打开配置文件_config.yml找到theme修改为：themes: next Hexo同步部署上传 在github上新建一个branchHexo 在blog根目录安装插件npm install hexo-git-backup --save 在根目录下_config.yml文件结尾添加 123456# 同步部署backup: type: git repository: github: git@github.com:&lt;&lt;username&gt;&gt;/ &lt;&lt;username&gt;&gt;.github.io.git,Hexo 进行同步部署 hexo b(backup)Tips: Updateif you install with –save, you must remove firstly when you update it.$ npm remove hexo-git-backup$ npm install hexo-git-backup --save You may get some troubles by your computer’ permission。just do sudo hexo b 配置Next主题Next官方配置文档 配置/themes/next/_config.yml文件修改网站底部信息123456footer: since: 2019（建站时间） copyright: powered: false (不显示hexo授权图片) theme: （不显示网站Next主题信息） enable: false 菜单栏menu123456menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive 主题风格12345# Schemes#scheme: Muse#scheme: Mistscheme: Pisces#scheme: Gemini 这里选择Pisces 个人社交信息12social: E-Mail: https://&lt;&lt;useremail&gt;&gt; || envelope (tip:前面必须加上网络协议) 网站头像avatar: 网站动画效果123motion: enable: true async: true 选择一个动画效果，不止有如下选择，但只能同时选择一个1234canvas_nest: truethree_waves: falsecanvas_lines: falsecanvas_sphere: false 需要Downloadjs文件进入next主题目录中source/lib direcotrygit clone https://github.com/theme-next/theme-next-canvas-nest canvas-nestUpdate12cd themes/next/source/lib/canvas-nestgit pull 复制代码按钮12345codeblock: border_radius: copy_button: enable: false show_result: false 站内搜索 安装站内搜索插件在blog根目录下npm install hexo-generator-searchdb --save 在blog根目录_config.yml中添加 12345search: path: search.xml field: post format: html limit: 10000 在/themes/next/_config.yml中搜索local_search并做如下修改 12345local_search: enable: true trigger: auto top_n_per_article: 1 unescape: true 打赏功能在themes/next/_config.yml中搜索reward支持微信(wechatpay)，支付宝(alipay)，比特币(bitcoin) 用LeanCloud增加Blog文章访问量功能- 注册leancloud Leancloud官网 进入控制台，创建应用（名称随意，可以更改） 点击应用右上角的齿轮图标（设置） –&gt;存储 –&gt;创建class (此处class name 必须是 Counter)，权限可设为所有用户 在安全中心添加Web安全域名, 如https://&lt;&lt;username&gt;&gt;.github.io/ 找到 应用key 复制AppID 与 AppKey 打开next的配置文件themes/next/_config.yml 找到 123456leancloud_visitors: enable: true app_id: app_key: security: true betterPerformance: false 对应填上刚复制的AppID 与 AppKey 打开blog配置文件_config.yml 在最后添加如下代码 123456leancloud_counter_security: enable_sync: true app_id: lMLdjNReIMxWXUbCfFcApNGb-gzGzoHsz app_key: GUCncs6ewY1f8yfwy92yNQ0J username: &lt;&lt;username&gt;&gt; password: &lt;&lt;password&gt;&gt; 安装hexo-leancloud-counter-security插件 在blog文件根目录下输入 `npm install hexo-leancloud-counter-security --save` 相同路径下输入 `hexo lc-counter register username password`(username password 随便输，不需要是leancloud的用户名密码) 打开blog配置文件_config.yml 将之前添加的 &lt;&lt;username&gt;&gt;和&lt;&lt;password&gt;&gt;替换为 刚设置的用户名密码(密码是纯数字需要加上双引号（表明是字符串），此用户名和密码将在hexo部署时使用。 在deploy下增加type: leancloud_counter_security_sync 如下 12345deploy:- type: gitrepo: git@github.com:&lt;&lt;username&gt;&gt;/&lt;&lt;username&gt;&gt;.github.io.gitbranch: master- type: leancloud_counter_security_sync 进一步设置权限 进入leancloud网站 设置class Counter的权限，将add_fields,create,delete权限都设为指定用户(在用户中输入之前设置的username之后点击添加即可) 可在浏览器点击右键点击Inspect查看是否有bug另附详转载细配置教程（内含leancloud权限详细配置） 为博客增加评论功能这里选择livere详见官网 DaoVoice 在线联系首先注册daovoice账号,邀请码是0f81ff2f，注册完成后会得到一个 app_id打开/themes/next/layout/_partials/head.swig在文件末尾写入123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;) daovoice(&apos;init&apos;, &#123; app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot; &#125;); daovoice(&apos;update&apos;); &lt;/script&gt;&#123;% endif %&#125; 打开主题配置文件themes/next/_config.yml，在最后写下如下代码：123# Online contact daovoice: truedaovoice_app_id: 填入你的app_id Online contactdaovoice: truedaovoice_app_id: 这里填你的刚才获得的 app_id 在每篇文章末尾加上结束标志 在\themes\next\layout\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:20px;&quot;&gt;-------------本文结束-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 打开\themes\next\layout\_macro\post.swig文件，在&lt;div class=&quot;post-body&gt;&lt;/div&gt; 之后， &lt;div class=&quot;post-footer&gt;&lt;/div&gt;之前添加如下代码 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;passage-end-tag.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 最后打开主题配置文件（/themes/next/_config.yml),在末尾添加： 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 自定义样式如: 代码块自定义样式 主页文章添加阴影效果 文章目录默认展开打开\themes\next\source\css\_custom\custom.styl,加入：(自己看需求修改定义)12345678910111213141516171819202122232425262728293031// Custom styles.code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125;// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125;// 文章目录默认展开.post-toc .nav .nav-child &#123; display: block; &#125;// 目录字体大小调整.post-toc ol &#123; font-size : 16px; &#125; leancloud 在右上角或者左上角实现fork me on github 打开链接选择样式，复制该样式代码样式1样式2 然后粘贴刚才复制的代码到themes/next/layout/_layout.swig文件中(放在&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;的下面) 把href改为你的github地址如下1234567891011&lt;div class=&quot;&#123;&#123; container_class &#125;&#125; &#123;% block page_class %&#125;&#123;% endblock %&#125;&quot;&gt; &lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;&lt;a href=&quot;https://github.com/&lt;&lt;username&gt;&gt;&quot; (修改此处)class=&quot;github-corner&quot; aria-label=&quot;View source on GitHub&quot;&gt;.......octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt; &lt;header id=&quot;header&quot; class=&quot;header&quot; itemscope itemtype=&quot;http://schema.org/WPHeader&quot;&gt; &lt;div class=&quot;header-inner&quot;&gt;&#123;% include &apos;_partials/header/index.swig&apos; %&#125;&lt;/div&gt; &lt;/header&gt; 参考文章hexo的next主题个性化教程:打造炫酷网站]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[archlinux终端Konsole配置]]></title>
    <url>%2F2019%2F03%2F20%2FkonsoleSetting%2F</url>
    <content type="text"><![CDATA[默认进入纯英文环境在 ～/.bashrc 中加入 export LANG=C但是这样会出现问题，例如：在这种情况下如果在终端用编辑器vim打开中文文件会出现乱码等等。在另一篇文章Arch系统语言设置中已经把终端的文字设置成与系统一样的了，现在不需要再这样设置bashrc了 设置透明]]></content>
      <categories>
        <category>linux系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linuxCommands]]></title>
    <url>%2F2019%2F03%2F20%2FlinuxCommands%2F</url>
    <content type="text"><![CDATA[在Konsole里， 切换到纯英语环境（比如为了查看某些bug信息），输入下列命令：export LANG=C 返回上一级目录 : .. 查看当前目录文件: lstree -L level : Descend only level directories deep]]></content>
      <categories>
        <category>linux系统</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>commands</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo框架搭建博客(Archlinux)]]></title>
    <url>%2F2019%2F03%2F20%2FBlog%2F</url>
    <content type="text"><![CDATA[Hexo官网 搭建框架 进入准备放置博客文件的文件夹 $ npm install hexo-cli -g $ hexo init blog $ cd blog $ npm install $ hexo server 写作$ hexo new [layout] &lt;title&gt;可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。layout(布局）Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。1234布局 路径post source/_postspage sourcedraft source/_drafts 显示文章摘要信息在文章中加入一个 &lt;!-- more--&gt; 创建categories与tags 在blog根目录hexo new page categorieshexo new page tags 打开source/categories/index.md添加 `type: “categories” 打开source/tags/index.md添加 `type: “tags” 给模板添加categories与tags打开scarffolds/post.md 添加categories: 添加tags:如下123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:--- 使用时只在新的文章创建后在文件首部填上该文章categories与tags即可 一般不需要再修改source/categories/index.mdsource/tags/index.md(文章里填入的categories与tags会自动生成在该页面上) Tips:添加tags有必须严格按照如下两种格式 把tags放在中括号[]里 用短划线-列出来如12345678---title: 博客配置date: 2019-03-21 13:47:44categories: - 博客搭建 (Hexo不支持指定多个同级分类)- 主题配置 （此时 &quot;主题配置&quot;为&quot;博客搭建&quot;的子分类)tags: [blog, 配置, 学习,其他]--- 12345678---title: linuxCommandsdate: 2019-03-20 22:39:32categories: linux系统tags: - linux- commands--- 完成后部署npm install hexo-server --save安装完成后，输入以下命令以启动服务器，您的网站会在 http://localhost:4000 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。 启动服务器$ hexo server 可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。12345$ hexo generate --deploy$ hexo deploy --generate上面两个命令可以简写为$ hexo g -d$ hexo d -g 部署 将博客部署到Github 在github上新建 repository 名字必须是 username.github.io githubSHH配置githubSSH官方文档 安装git sudo pacman -S git 需要设置好姓名和邮箱之后才能开始使用 Git 12$ git config --global user.name &quot;username&quot;$ git config --global user.email &quot;useremail&quot; 查看git设置 git config --list 安装openssh sudo pacman -S openssh 生成SSH秘钥 ssh-keygen -t rsa -b 4096 -C &quot;useremail&quot; 打开 ～.ssh/id_rsa.pub 复制全部内容粘贴在github上 settings -&gt; SSH and GPG keys -&gt;New SSH key 测试SSH设置是否成功$ ssh -T git@GitHub.comoutput如下即可算是正常Hi &lt;&lt;username&gt;&gt;! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 配置 _config.yml 修改url url: https://username.github.io 修改deploy type: git repo: git@github.com:username/username.github.io.git branch: master 安装deployer插件 $ npm install hexo-deployer-git --save 部署hexo g hexo d(hexo deploy)(hexo g -d) 标签/分类数量统计不准确？因为 Hexo 有缓存的功能，因此有时候你会发现在 标签 和 分类 页面中的数量统计并不准确。 出现这个问题时，可以按照以下步骤重新生成站点的内容： 删除站点目录下的 db.json 文件 在站点目录下执行命令 hexo clean 在站点目录下执行命令，重新生成 hexo generate 当执行完以上步骤后，可以在本地启动服务器来验证下是否已经解决问题。 文章资源文件夹对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。12_config.ymlpost_asset_folder: true 当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] &lt;title&gt;命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。Tips:如果用gitpage，切将图片文件放在与 markdown文件同名的文件夹下，则文章中的图片路径不需要写文件夹如123在Blog.md中编辑文章，需要用到同名的Blog文件夹下的URL.png图片,则Blog.md中填写的路径应如下:![修改url](URL.png &quot;修改url&quot;)而不是![修改url](Blog/URL.png &quot;修改url&quot;)]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
